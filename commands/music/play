bot.on("message", async message => {
    if(message.author.bot || message.channel.type === "text");
    let prefix = "!";
    let messageArray = message.content.split(" ");
    let cmd = messageArray[0].toLowerCase();
    let args = messageArray.slice[1];
    if (message.author.bot) return;
    if (!message.content.startsWith(prefix)) return;
 
    const serverQueue = queue.get(message.guild.id);

    if (message.content.startsWith(`${prefix}play`)) {
      execute(message, serverQueue);
      return;
    } else if (message.content.startsWith(`${prefix}skip`)) {
      skip(message, serverQueue);
      return;
    } else if (message.content.startsWith(`${prefix}stop`)) {
      stop(message, serverQueue);
      return;
    } else if (message.content.startsWith(`${prefix}volume`)) {
      volume(message, serverQueue);
      return;
    } else if (message.content.startsWith(`${prefix}np`)) {
      np(message, serverQueue);
      return;
    } else if (message.content.startsWith(`${prefix}queue`)) {
      Queue(message, serverQueue);
      return;
    } else if (message.content.startsWith(`${prefix}pause`)) {
      pause(message, serverQueue);
      return;
    } else if (message.content.startsWith(`${prefix}resume`)) {
      resume(message, serverQueue);
      return;
    } else if (message.content.startsWith(`${prefix}drop`)) {
      drop(message, serverQueue);
      return;
    } else if (message.content.startsWith(`${prefix}jump`)) {
      jump(message, serverQueue);
      return;
    }
  });

  async function execute(message, serverQueue) {
    const args = message.content.trim().split(/ +/g);
    
    const voiceChannel = message.member.voice.channel;
    if (!voiceChannel)
      return message.channel.send(
        "You need to be in a voice channel to play music!"
      ).then(m => m.delete({timeout: 5000}));
    const permissions = voiceChannel.permissionsFor(message.client.user);
    if (!permissions.has("CONNECT") || !permissions.has("SPEAK")) {
      return message.channel.send(
        "I need the permissions to join and speak in your voice channel!"
      );
      
    }

    let song;
if (ytdl.validateURL(args[1])) {
  const songInfo = await ytdl.getInfo(args[1]);
  song = {
    title: songInfo.title,
    url: songInfo.video_url
  };
} else {
  const {videos} = await yts(args.slice(1).join(" "));
  if (!videos.length) return message.channel.send("No songs were found!");
  song = {
    title: videos[0].title,
    url: videos[0].url
  };
}

    if (!serverQueue) {
      const queueContruct = {
        textChannel: message.channel,
        voiceChannel: voiceChannel,
        connection: null,
        songs: [],
        volume: 5,
        playing: true
      };

      queue.set(message.guild.id, queueContruct);

      queueContruct.songs.push(song);

      try {
        var connection = await voiceChannel.join();
        queueContruct.connection = connection;
        play(message.guild, queueContruct.songs[0]);
      } catch (err) {
        console.log(err);
        queue.delete(message.guild.id);
        return message.channel.send(err);
      }
      
    } else {
      serverQueue.songs.push(song);
      return message.channel.send(`${song.title} has been added to the queue!`).then(m => m.delete({timeout: 6000}));
    }
  }

  function skip(message, serverQueue) {
    if (!message.member.voice.channel)
      return message.channel.send(
        "You have to be in a voice channel to stop the music!"
      );
    if (!serverQueue)
      return message.channel.send("There is no song that I could skip!");
    serverQueue.connection.dispatcher.end();
  }

  function stop(message, serverQueue) {
    if (!message.member.voice.channel)
      return message.channel.send(
        "You have to be in a voice channel to stop the music!"
      );
    if (!serverQueue)
    return message.channel.send("There is no song that I could stop!");
    
    serverQueue.songs = [];
    serverQueue.connection.dispatcher.end();
    
    const stopped = new Discord.MessageEmbed()
    .setColor("GREEN")
    .setDescription("Music Stopped!")

message.channel.send(stopped)
  }

  function volume(message, serverQueue) {
    if(!message.member.voice.channel)
      return message.channel.send(
        "You have to be in a voice channel to using volume")
    if(!serverQueue)
      return message.channel.send(
        "There is nothing playing")
    const args = message.content.trim().split(/ +/g);
    if(!args[1]) return message.channel.send(`That volume is: **${serverQueue.volume}**`)
    if(isNaN(args[1])) return message.channel.send("That is not a valid amount to change the volume to")
    serverQueue.volume = args[1]
    serverQueue.connection.dispatcher.setVolumeLogarithmic(args[1] / 5)
    message.channel.send(`I have changed the volume to: **${args[1]}**`).then(m => m.delete({timeout: 10000}))
  }
  function np(message, serverQueue) {
    if(!serverQueue) return message.channel.send("There is nothing playing")
    const embed = new MessageEmbed()
    .setThumbnail(serverQueue.songs[0].thumbnail)
    .setDescription(`Now playing: **${serverQueue.songs[0].title}**`)
    message.channel.send(embed)
      .then(m => m.delete({timeout: 15000}))
  }
  function Queue(message, serverQueue) {
    if(!serverQueue) return message.channel.send("There is nothing playing")
    message.channel.send(`
__**Song Queue:**__
${serverQueue.songs.map(song => `**-** ${song.title}`).join('\n')}

**Now Playing:** ${serverQueue.songs[0].title}`, { split: true })
  }

  function pause(message, serverQueue) {
    if(!message.member.voice.channel) return message.channel.send("You need to be in a voice channel to use the pause")
    if(!serverQueue) return message.channel.send("There is nothing playing")
    if(serverQueue && !serverQueue.playing) return message.channel.send("The music is already paused")
    serverQueue.playing = false;
    serverQueue.connection.dispatcher.pause(true);
    message.channel.send("I have now paused the music for you");
    
  }
  
  function resume(message, serverQueue) {
    if(!message.member.voice.channel) return message.channel.send("You need to be in a voice channel to use the resume")
    if(!serverQueue) return message.channel.send("There is nothing playing")
    if(serverQueue && serverQueue.playing) return message.channel.send("The music is already playing")
    serverQueue.playing = true;
    serverQueue.connection.dispatcher.resume();
    return message.channel.send("I have now resumed the music for you");
    
  }

  function jump(message, serverQueue) {
      const args = message.content.trim().split(/ +/g);
      const embed = new MessageEmbed()
.setColor(`red`);

    const { channel } = message.member.voice;
    if (!channel) {
      //IF AUTHOR IS NOT IN VOICE CHANNEL
      embed.setAuthor("YOU NEED TO BE IN VOICE CHANNEL :/")
      return message.channel.send(embed);
    }


    if (!serverQueue) {
      embed.setAuthor("There is nothing playing that i could loop")
      return message.channel.send(embed);
    }
     if(!args[0]) {
      embed.setAuthor(`Please Give The Song Number`)
      return message.channel.send(embed)
    }
    
      if(isNaN(args[0])) {
      embed.setAuthor("Please Use Numerical Values Only")
      return message.channel.send(embed)
    }
    
  if(serverQueue.songs.length < args[0]) {
    embed.setAuthor("Unable To Find This Song in Queue")
    return message.channel.send(embed)  
                                         }
    serverQueue.songs.splice(0, Math.floor(args[0] - 1))
    serverQueue.connection.dispatcher.end()
    
    embed.setDescription(`JUMPED TO THE SONG NUMBER - ${args[0]}`)
    message.channel.send(embed)
    
  }

  function drop(message, serverQueue) {
      let embed = new MessageEmbed();
    const args = message.content.trim().split(/ +/g);
    const { channel } = message.member.voice;
    if (!channel) {
      embed.setAuthor("YOU ARE NOT IN VOICE CHANNEL");
      return message.channel.send(embed)
    }

    if (!serverQueue) {
      embed.setAuthor("The Queue is empty");
      return message.channel.send(embed)
    }
    
    
    !serverQueue.songs.splice(0, Math.floor(args[0] - 1));
    embed.setDescription(`${message.author} ❌ removed **${serverQueue.songs[0].title}** from the queue.`)
    embed.setThumbnail(bot.user.displayAvatarURL())
    return message.channel.send(embed)
}




  function play(guild, song) {
    const serverQueue = queue.get(guild.id);
    if (!song) {
      serverQueue.voiceChannel.leave();
      queue.delete(guild.id);
      return;
    }

    
     let npmin = Math.floor(song.times / 60);
     let npsec = song.times - npmin * 60
     let np = `${npmin}:${npsec}`.split(' ')
     
     
    const dispatcher = serverQueue.connection
      .play(ytdl(song.url, ytdlOptions, {filter: 'audioonly', quality: 'highestaudio', type: 'opus'}))
      .on("finish", () => {
        serverQueue.songs.shift();
        play(guild, serverQueue.songs[0]);
      })
      .on("error", error => console.error(error));
    dispatcher.setVolumeLogarithmic(serverQueue.volume / 5)
                   const time = serverQueue.connection.dispatcher.streamTime;
                   const embed = new MessageEmbed()
                    .setColor("GREEN")
                    .setTitle('Now Playing\n')
                    .setThumbnail(song.thumbnail)
                    .setTimestamp()
                    .setDescription(`🎵 Now playing:\n **${song.title}** 🎵\n${song.url}\n\n Song Length: **${Math.floor(serverQueue.connection.dispatcher.streamTime / 60000)}:${Math.floor((serverQueue.connection.dispatcher.streamTime % 60000)/1000) <10 ? '0'+Math.floor((serverQueue.connection.dispatcher.streamTime % 60000)/1000) : Math.floor((serverQueue.connection.dispatcher.streamTime % 60000)/1000)}  Duration: ${time}**`)  //${np}
                    .setFooter(bot.user.username, bot.user.displayAvatarURL())
                serverQueue.textChannel.send(embed);


}
